Q1 Create a basic Express server that listens on port 3000 and 
responds with "Hello Express".

=>  const app = express(); — What it Means
This line creates an Express application instance.

In simple terms:"Give me an object (app) that represents my 
entire web server, built using Express."

Think of express() like turning on a machine:

express() is the factory function that gives you a working machine (the server).

app is your control panel where you add buttons (routes), 
filters (middleware), and start it (app.listen()).

Que - express() is this express a function or an object?

express is a function — specifically a factory function.

When you write:

import express from 'express';
const app = express();

You are:
Importing a function named express from the Express module.
Calling that function → it returns an object (app) that represents your web server.

Behind the Scenes
express ➝ function

express() ➝ returns an instance of an Express application object

That returned object (app) gives you access to methods like:

app.get()      // define GET routes
app.post()     // define POST routes
app.use()      // register middleware
app.listen()   // start the server

Simplified Code Flow
Let’s say Express library internally looks like this (simplified):

function express() {
  const app = createExpressApp(); // returns an object with app.get, app.post, etc.
  return app;
}

export default express;

-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------


IMPORTANT RES REQ METHODS AND MIDDLEWARES

RES:
| Method                              | Description                                                      | Example                                          |
| ----------------------------------- | ---------------------------------------------------------------- | ------------------------------------------------ |
| **1. `res.send()`**                 | Sends a string, object, buffer, or array as the response         | `res.send("Hello World")`                        |
| **2. `res.json()`**                 | Sends a JSON-formatted response                                  | `res.json({ name: "John" })`                     |
| **3. `res.status()`**               | Sets the HTTP status code                                        | `res.status(404).send("Not Found")`              |
| **4. `res.sendFile()`**             | Sends a file to the client                                       | `res.sendFile(__dirname + "/index.html")`        |
| **5. `res.redirect()`**             | Redirects the client to another URL                              | `res.redirect("/login")`                         |
| **6. `res.set()` / `res.header()`** | Sets HTTP headers                                                | `res.set("Content-Type", "text/plain")`          |
| **7. `res.end()`**                  | Ends the response without any data (used rarely with `res.send`) | `res.end()`                                      |
| **8. `res.render()`**               | Renders a view using a template engine like EJS, Pug             | `res.render("home", { title: "Welcome" })`       |
| **9. `res.download()`**             | Prompts the user to download a file                              | `res.download("report.pdf")`                     |
| **10. `res.cookie()`**              | Sets a cookie in the client’s browser                            | `res.cookie("user", "John", { maxAge: 900000 })` |


REQ:
| Property/Method               | Description                                                                                      | Example                                          |
| ----------------------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------ |
| **1. `req.body`**             | Accesses data sent in the **body** of POST/PUT requests (needs middleware like `express.json()`) | `console.log(req.body.name)`                     |
| **2. `req.params`**           | Gets route **parameters** (e.g., `/user/:id`)                                                    | `req.params.id`                                  |
| **3. `req.query`**            | Gets **query string** parameters (e.g., `/search?q=apple`)                                       | `req.query.q`                                    |
| **4. `req.headers`**          | Returns all request headers                                                                      | `req.headers['authorization']`                   |
| **5. `req.method`**           | Returns the HTTP method used (GET, POST, etc.)                                                   | `req.method === "POST"`                          |
| **6. `req.url`**              | Returns the full URL of the request                                                              | `console.log(req.url)`                           |
| **7. `req.path`**             | Returns only the path part of the URL                                                            | `/user/profile` → `req.path === "/user/profile"` |
| **8. `req.cookies`**          | Gets cookies (needs cookie-parser middleware)                                                    | `req.cookies.token`                              |
| **9. `req.ip`**               | Gets the client’s IP address                                                                     | `console.log(req.ip)`                            |
| **10. `req.get(headerName)`** | Gets a specific header                                                                           | `req.get('User-Agent')`                          |


MIDDLEWARE:
| Middleware                                 | Type                       | Purpose                                                             | Example                                                   |
| ------------------------------------------ | -------------------------- | ------------------------------------------------------------------- | --------------------------------------------------------- |
| **1. `express.json()`**                    | Built-in                   | Parses incoming JSON requests                                       | `app.use(express.json())`                                 |
| **2. `express.urlencoded()`**              | Built-in                   | Parses form data (`x-www-form-urlencoded`)                          | `app.use(express.urlencoded({ extended: true }))`         |
| **3. `express.static()`**                  | Built-in                   | Serves static files (images, CSS, JS)                               | `app.use(express.static('public'))`                       |
| **4. `cors`**                              | Third-party                | Enables Cross-Origin Resource Sharing                               | `app.use(cors())`                                         |
| **5. `morgan`**                            | Third-party                | Logs HTTP requests to console                                       | `app.use(morgan('dev'))`                                  |
| **6. `helmet`**                            | Third-party                | Secures HTTP headers                                                | `app.use(helmet())`                                       |
| **7. `cookie-parser`**                     | Third-party                | Parses cookies from incoming requests                               | `app.use(cookieParser())`                                 |
| **8. `compression`**                       | Third-party                | Compresses response bodies for better performance                   | `app.use(compression())`                                  |
| **9. `body-parser`**                       | Third-party (now built-in) | Older way to parse JSON/form data                                   | `app.use(bodyParser.json())`                              |
| **10. `express-session`**                  | Third-party                | Manages user sessions                                               | `app.use(session({ secret, resave, saveUninitialized }))` |
| **11. `method-override`**                  | Third-party                | Allows use of PUT/DELETE in places where only POST/GET is supported | `app.use(methodOverride('_method'))`                      |
| **12. `rate-limit` (express-rate-limit)**  | Third-party                | Limits repeated requests from same IP (DDOS protection)             | `app.use(rateLimit({...}))`                               |
| **13. `validator` or `express-validator`** | Third-party                | Validates and sanitizes user input                                  | `app.use(check('email').isEmail())`                       |
| **14. Custom Middleware**                  | Developer-defined          | Runs custom logic (auth, logs, etc.)                                | See below                                                 |
| **15. Error-handling Middleware**          | Developer-defined          | Catches all errors in the app                                       | `app.use((err, req, res, next) => { ... })`               |


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Q4 Add query parameters support (/search?q=books) and log them.

=> Query parameters are used to pass additional information to 
the server through the URL.

📌 Think of it like this:
You ask a question, and query parameters are the specific 
details you include.

Example:
/search?q=books&category=fiction

You're saying:
🗣️ “Search for books, but only in the fiction category.”

🔧 In Express, query parameters let you:
Use Case	                  Example
Search/filter data        	/products?category=shoes&brand=Nike
Pagination                	/articles?page=2&limit=10
Sorting                    	/posts?sort=latest
Login redirect	            /login?redirect=/dashboard
Optional user input	        /weather?city=Delhi

🧠 Why it's useful:
1 No need to define multiple routes like /books, /shoes, /shoes/nike
2 Allows dynamic, flexible requests using a single route
3 Clean and readable format (especially in GET requests)
4 Works well with frontend apps and Postman

CAPILAL OR SMALL CASE CAN AFFECT QUERY PARAMETERS


----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------


Q5 Use route parameters (/user/:id) and print the user ID.

=>  req.params is an object that holds the values of route 
parameters in the URL.

🧠 What are route parameters?
Route parameters are placeholders defined in your route path 
using a : colon.

You can also have multiple parameters:
app.get('/post/:postId/comment/:commentId', )

This allows you to capture the value of id from the URL 
and do something with it — like print it, fetch a user from a 
database, etc.


-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------


Q7 Add middleware to log all incoming requests (method and URL)

=> middleware in Express can inspect or modify requests and responses.
It's placed before any routes, so it runs on every request.
This helps you track activity, debug issues, and monitor traffic.
app.use()	Adds a middleware globally

res.send() only accepts one argument. Multiple values like 
this won’t work and can cause weird issues
res.send('Hello world!', req.method, req.url)


----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------


Q8 Use express.static() to serve static files from a /public directory.

=> express.static is a built-in middleware function in Express 
used to serve static files such as:
HTML,CSS.JavaScript (client-side),Images,Videos,Fonts,PDFs, etc.

Static files are those that don’t change dynamically and are
sent as-is to the client.

Syntax

express.static(root)

root: The folder path where your static files live.

📌 Why It's Useful

1 You don’t have to create routes manually for static files.
2 It's very fast because it's optimized internally.
3 Helps you separate frontend files from backend logic.
4 You can also mount it at a virtual path:
    app.use('/assets', express.static('public'));
    Now your files are available at:
    http://localhost:5000/assets/index.html
    http://localhost:5000/assets/style.css


Only use express.static() for public assets. Don't store 
sensitive files there — they’ll be directly accessible from 
the browser.

you can serve multiple static directories using express.static() in Express.

🔹 Option 1: Use app.use() multiple times

import express from 'express';
const app = express();

// Serve 'public' directory
app.use(express.static('public'));

// Serve 'uploads' directory
app.use(express.static('uploads'));

app.listen(5000, () => console.log('Server running on port 5000'));

Now Express will look for requested files in this order:
public/
uploads/

If the file is not found in public, it tries uploads.

🔹 Option 2: Mount them at different URLs

You can also mount them under different virtual paths:

app.use('/static', express.static('public'));
app.use('/media', express.static('uploads'));
Now access like:
http://localhost:5000/static/index.html
http://localhost:5000/media/image.png

🔹 Option 3: Serve an array of directories

If you're using the same virtual path but want to look in 
multiple folders, you can do:

app.use('/static', [
  express.static('public'),
  express.static('uploads')
]);
It will check public/ first, then uploads/ for a match.

🧠 Use Cases

| Use Case                       | How to Set It Up             |
| ------------------------------ | ---------------------------- |
| Serve frontend HTML/CSS/JS     | `express.static('public')`   |
| Serve user-uploaded files      | `express.static('uploads')`  |
| Serve admin or docs separately | Mount at `/admin` or `/docs` |



    Q lets say i serve a html file through express.static and 
    that html file has a script will it also run that script

✅ Yes — if you serve an HTML file using express.static, any 
script linked inside it will run in the browser as long as the 
script file is accessible.

🧠 Here's Why It Works
When a browser requests an HTML file:

Express serves the .html file.

The browser reads the HTML, finds <script src="script.js">.

It makes a new HTTP request to script.js.

If Express is also serving that file (via express.static), it responds with the JavaScript code.

The browser then executes the script.

📁 Example Folder Structure:
pgsql
Copy code
project/
│
├── public/
│   ├── index.html
│   └── script.js
│
└── server.js



    Q what if they are not in same folder but html has a script 


✅ If the HTML file references a <script src="..."> that is 
not in the same folder, it will still run — only if Express 
is set up to serve that script file from its actual location.

🧠 Think of It Like This:
The <script src="..."> in HTML tells the browser: “Hey, go 
fetch this JavaScript file from this path.”

If Express is serving that path, the browser gets the file and 
runs it.

If Express isn’t serving it, the browser gets a 404, and the 
script won’t run.

🔧 Example Setup
Folder structure:
pgsql
Copy code
project/
├── public/
│   └── index.html
├── scripts/
│   └── main.js
└── server.js
index.html (inside public/):


🔴 What Happens If You Don’t Serve the Script?
If you forget:
app.use("/js", express.static("scripts"));
Then the browser will request /js/main.js and get a 404 Not 
Found, so no script will run.


------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------


Q10 Add a middleware that validates if name field exists in 
POST body, else return 400.

=> app.use() mounts middleware functions in your Express app.

It tells the app:
“For every request that matches this path (or all paths, if 
none is specified), run this function.”

Syntax:
app.use([path], callback)

path (optional): The route you want this middleware to apply to.
callback: A middleware function or series of functions.

 Examples:
1. Apply middleware globally:
app.use((req, res, next) => {
  console.log(`${req.method} ${req.originalUrl}`);
  next(); // Pass to next middleware/route
});

This will log every incoming request.

2. Apply middleware to a specific route:
app.use('/admin', (req, res, next) => {
  console.log('Accessing the admin section...');
  next();
});

This will only run for routes starting with /admin, like /admin/settings.

3. Serve static files:
app.use(express.static('public'));

This serves static files (like images, CSS, JS) from the public folder.


------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------


Q11 Add error handling middleware and trigger it using a faulty route.

=> error-handling middleware is a special kind of middleware 
designed to catch and respond to errors that happen during the 
request-response cycle.

Error-handling middleware always has four arguments:

(err, req, res, next) => {
  // handle the error here
}

Express knows this is an error handler only if it has 4 parameters.

How It Works:

You create an error:

const err = new Error("This is a test error");
You call next(err):

Express sees that an error was passed
So it skips all normal middleware
And jumps directly to the first middleware with 4 parameters

Then this runs:

app.use((err, req, res, next) => {
  res.status(500).send("Something broke!");
});


-----------------------------------------------------------------------
-----------------------------------------------------------------------

Q12 Handle 404 errors with a custom message for undefined routes.

=> define a middleware at the end of your routes to catch all 
unmatched requests.

app.use() without a specific path will match all requests.

If none of the defined routes are matched, this middleware 
catches the request.

res.status(404) sets the status code to 404 (Not Found).

A custom JSON response or HTML message can be returned based on 
your app type (API or web app)


----------------------------------------------------------------------------
----------------------------------------------------------------------------


Q13 Use res.download() to allow the download of a file from your server.

=> 










































